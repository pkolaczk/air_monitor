# Copyright 2018 Brian T. Park
#
# MIT License
"""
Generate the internal versions of zone_infos.py and zone_policies.py directly
instead of creating files. These maps can be used for further processing.
"""

import logging
from extractor import ZoneEraRaw
from extractor import ZoneRuleRaw
from argenerator import normalize_name
from argenerator import normalize_raw


class InlineGenerator:
    """Generate Python zone infos and policies maps inlined (instead of files).
    """

    def __init__(self, zones_map, rules_map):
        """
        Args:
            zones_map (dict): {full_name -> ZoneEra[]}
            rules_map (dict): {policy_name -> ZoneRules[]}
        """
        self.zones_map = zones_map
        self.rules_map = rules_map

        self.zone_infos = {}  # same as zone_infos.py {zone_name -> zone_info}
        self.zone_policies = {}  # zone_policies.py {policy_name -> zone_policy}

    def generate_maps(self):
        """Return the zone_infos and zone_policies maps which look identical
        to the zone_infos.py and zone_policies.py generated by PythonGenerator.
        """
        logging.info('Generating inlined zone_policies and zone_infos')
        self._generate_policies()
        self._generate_infos()
        return (self.zone_infos, self.zone_policies)

    def _generate_policies(self):
        for name, rules in self.rules_map.items():
            policy_rules = []
            for rule in rules:
                # yapf: disable
                policy_rules.append({
                    'fromYear': rule.fromYear,
                    'toYear': rule.toYear,
                    'inMonth': rule.inMonth,
                    'onDayOfWeek': rule.onDayOfWeek,
                    'onDayOfMonth': rule.onDayOfMonth,
                    'atSeconds': rule.atSecondsTruncated,
                    'atTimeSuffix': rule.atTimeSuffix,
                    'deltaSeconds': rule.deltaSecondsTruncated,
                    'letter': rule.letter
                })
                # yapf: enable

            normalized_name = normalize_name(name)
            self.zone_policies[normalized_name] = {
                'name': name,  # policy name
                'rules': policy_rules
            }

    def _generate_infos(self):
        for zone_name, eras in self.zones_map.items():
            zone_eras = []
            for era in eras:
                policy_name = era.rules
                if policy_name in ['-', ':']:
                    zone_policy = policy_name
                else:
                    policy_name = normalize_name(policy_name)
                    zone_policy = self.zone_policies[policy_name]

                # yapf: disable
                zone_eras.append({
                    'offsetSeconds': era.offsetSecondsTruncated,
                    'zonePolicy': zone_policy,
                    'rulesDeltaSeconds': era.rulesDeltaSecondsTruncated,
                    'format': era.format,
                    'untilYear': era.untilYear,
                    'untilMonth': era.untilMonth,
                    'untilDay': era.untilDay,
                    'untilSeconds': era.untilSecondsTruncated,
                    'untilTimeSuffix': era.untilTimeSuffix,
                })
                # yapf: enable
            self.zone_infos[zone_name] = {'name': zone_name, 'eras': zone_eras}
